@import "@nou/config/theme.css" theme(reference);

@layer components {
  .field {
    --border-color: theme("colors.outline");
    --border-scale-y: 0.75;
    --start-padding: theme("spacing.3");
    display: inline-flex;
    flex-flow: column nowrap;
    &:has(:user-invalid) {
      --border-color: theme("colors.error");
      --border-scale-y: 2;
      & .error,
      & .label {
        color: theme("colors.error");
      }
    }
  }
  .wrapper {
    position: relative;
    display: flex;
    width: 100%;
    flex-direction: column;
    transition: background-color 0.2s ease-out;
  }
  .wrapperUnderline {
    border-radius: theme("borderRadius.lg") theme("borderRadius.lg") 0 0;
    &:after {
      position: absolute;
      bottom: 0;
      inset-inline: 0;
      content: "";
      height: 2px;
      border-radius: 0 0 theme("borderRadius.sm") theme("borderRadius.sm");
      transition: all 0.2s ease-out;
      transform-origin: center bottom;
      transform: scaleY(var(--border-scale-y));
      isolation: isolate;
      background: linear-gradient(
        to top,
        var(--border-color),
        var(--border-color)
      );
    }
    &:where(:hover) {
      background-color: theme("colors.on-surface/0.05");
    }
    &:where(:focus-within) {
      background-color: theme("colors.on-surface/0.08");
    }
    &:where(:focus-within) {
      --border-color: theme("colors.primary");
      --border-scale-y: 1.5;
    }
  }
  .wrapperGhost {
    --border-color: transparent;
    & > .inputWrapper {
      border: 1px solid var(--border-color);
      transition: background-color 0.2s ease-out;
      border-radius: theme("borderRadius.lg");
      background-color: theme("colors.on-surface/0.03");
    }
    &:where(:hover) > .inputWrapper {
      background-color: theme("colors.on-surface/0.05");
    }
    &:where(:focus-within) > .inputWrapper {
      background-color: theme("colors.on-surface/0.08");
    }
  }
  .wrapperInline {
    & > .inputWrapper {
      background-color: transparent;
    }
    &:has(:where(input, textarea):not(:placeholder-shown)) {
      & > .label {
        opacity: 0;
        transform: translateY(2px);
        transition: 0.2s ease-out;
        transition-property: opacity, transform;
      }
      &:focus-within > .label {
        transform: none;
        opacity: 1;
      }
    }
  }
  .sizeBase {
    @apply text-base;
    & input,
    & textarea,
    & select > button {
      padding: theme("spacing.3") var(--start-padding);
      min-height: theme("spacing.12");
    }

    & :where(.prefix, .suffix) {
      padding-block-start: theme("spacing.2");
    }
  }

  .sizeLg {
    @apply text-3xl font-medium;
    & :where(input, textarea) {
      padding: theme("spacing[3.5]") var(--start-padding);
      min-height: theme("spacing.12");
    }
    & :where(.prefix, .suffix) {
      padding-block-start: theme("spacing.1");
    }
  }

  .inputWrapper {
    display: flex;
    align-items: flex-start;
    cursor: default;
  }
  .label {
    color: theme("colors.on-surface");
    &:not(legend) {
      padding-inline: var(--start-padding);
      padding-block-start: theme("spacing.2");
    }
  }
  .description {
    /* same as label */
    padding-inline: var(--start-padding);
    color: theme("colors.on-surface-variant");
    @apply text-sm;
  }
  .prefix,
  .suffix {
    flex-shrink: 0;
    &:empty {
      display: none;
    }
  }
  .prefix {
    padding-inline-start: var(--start-padding);
    padding-inline-start: theme("spacing.2");
  }

  .suffix {
    padding-inline-start: theme("spacing.2");
    padding-inline-end: var(--start-padding);
  }

  .fieldset {
    --errors-count: 0;
    position: relative;
    padding-block-end: calc(
      var(--errors-count) * theme("lineHeight.5") + 0.25rem
    );
    & .error {
      color: theme("colors.error");
      white-space: pre;
    }
  }
}
