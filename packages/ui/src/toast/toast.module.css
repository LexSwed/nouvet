@import "@nou/config/theme.css" theme(reference);

@layer components {
  .toast {
    transition: opacity 0.24s ease, display 0.3s ease allow-discrete,
      filter 0.3s ease, translate 0.4s cubic-bezier(0.5, 0.85, 0.85, 1.25),
      scale 0.3s ease, inset-block-start 0.14s ease;
    position: absolute;
    inset-block-start: calc(anchor(start, 0) + theme(spacing.2));
    /* use padding instead of positioning to allow hover to remain stable for multiple toasts */
    padding: theme("spacing[1]") theme("spacing[3]");
    border-radius: theme(borderRadius.2xl);
    min-width: theme(spacing.64);
    filter: contrast(0.95) brightness(1.01);
    z-index: var(--nou-toast-index);
    pointer-events: all !important;

    &:first-of-type {
      scale: 1;
      filter: none;
      opacity: 1;
      inset-block-start: anchor(start, 0) !important;
    }

    &:where(:focus, :hover, :focus-within) .removeToast {
      scale: 1;
    }
  }
  .removeToast {
    scale: 0.2;
  }

  .list {
    &:hover > .toast {
      &:nth-of-type(2),
      &:nth-of-type(3) {
        inset-block-start: anchor(end, 0);
        scale: 1;
        filter: none;
        opacity: 1;
      }
    }
    &:is(:focus-within) {
      & > .toast:has(~ .toast:where(:focus, :focus-within)) {
        scale: 0.85;
        inset-block-start: anchor(start, 0);
        filter: contrast(0.95) brightness(1.01);
        opacity: 1;
        z-index: 1;
      }

      /* previous to focused */
      & > .toast:has(+ .toast:where(:focus, :focus-within)),
      /* if focused is the last element, target 2 previous ones */
      & > .toast:has(+ .toast + .toast:last-of-type:where(:focus, :focus-within)) {
        opacity: 1;
        scale: 1;
        filter: none;
        z-index: 8;
        inset-block-start: calc(anchor(start, 0) + theme(spacing.2));
      }

      /* focused toast */
      & > .toast:where(:focus, :focus-within):not(:first-of-type),
      /* next to focused */
      & > .toast:where(:focus, :focus-within) + .toast,
      /* if focused is the first element */
      & > .toast:where(:focus, :focus-within):first-of-type + .toast + .toast,
      /* last to focused */
      & > .toast:has(+ .toast:where(:focus, :focus-within):last-of-type),
      /* if focused is 2nd to last, show the rest of the toasts */
      & > .toast:where(:focus, :focus-within):nth-last-of-type(2) ~ .toast {
        inset-block-start: anchor(end);
        filter: none;
        scale: 1;
        opacity: 1;
      }

      & > .toast:where(:focus, :focus-within) {
        opacity: 1;
        scale: 1;
        z-index: 100;
        filter: none;
      }
    }
  }
  @starting-style {
    .toast:is(:not(:empty)) {
      opacity: 0;
      translate: 0 -2rem;
    }
  }
}
